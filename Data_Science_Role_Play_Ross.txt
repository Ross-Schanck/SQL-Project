Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

SELECT COUNT(*)
FROM table

i.    Attribute table = 10000

	SELECT COUNT(*)
	FROM attriburte
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+

ii.   Business table = 10000

	SELECT COUNT(*)
	FROM business
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+

iii.  Category table = 10000

	SELECT COUNT(*)
	FROM category
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+

iv.   Checkin table = 10000

	SELECT COUNT(*)
	FROM checkin
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+

v.    elite_years table = 10000

	SELECT COUNT(*)
	FROM elite_years
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+

vi.   friend table = 10000

	SELECT COUNT(*)
	FROM friend
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
 
vii.  hours table = 10000

	SELECT COUNT(*)
	FROM hours
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
 
viii. photo table = 10000

	SELECT COUNT(*)
	FROM photo
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
  
ix.   review table = 10000 

	SELECT COUNT(*)
	FROM review
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
 
x.    tip table = 10000 

	SELECT COUNT(*)
	FROM tip
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
 
xi.   user table = 10000

	SELECT COUNT(*)
	FROM user
	+----------+
	| COUNT(*) |
	+----------+
	|    10000 |
	+----------+
 
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT COUNT (DISTINCT(key)
FROM table

i.    Business = 
	+----------------------+
	| COUNT (DISTINCT(id)) |
	+----------------------+
	|                10000 |
	+----------------------+

ii.   Hours = 
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          1562 |
	+-------------------------------+

iii.  Category = 
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          2643 |
	+-------------------------------+

iv.   Attribute = 
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          1115 |
	+-------------------------------+

v.    Review =
	+----------------------+
	| COUNT (DISTINCT(id)) |
	+----------------------+
	|                10000 |
	+----------------------+
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          8090 |
	+-------------------------------+
	+---------------------------+
	| COUNT (DISTINCT(user_id)) |
	+---------------------------+
	|                      9581 |
	+---------------------------+

vi.   Checkin = 
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                           493 |
	+-------------------------------+

vii.  Photo =
	+----------------------+
	| COUNT (DISTINCT(id)) |
	+----------------------+
	|                10000 |
	+----------------------+
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          6493 |
	+-------------------------------+

viii. Tip = 
	+---------------------------+
	| COUNT (DISTINCT(user_id)) |
	+---------------------------+
	|                       537 |
	+---------------------------+
	+-------------------------------+
	| COUNT (DISTINCT(business_id)) |
	+-------------------------------+
	|                          3979 |
	+-------------------------------+

ix.   User = 
	+----------------------+
	| COUNT (DISTINCT(id)) |
	+----------------------+
	|                10000 |
	+----------------------+

x.    Friend = 
	+---------------------------+
	| COUNT (DISTINCT(user_id)) |
	+---------------------------+
	|                        11 |
	+---------------------------+

xi.   Elite_years =
	+---------------------------+
	| COUNT (DISTINCT(user_id)) |
	+---------------------------+
	|                      2780 |
	+---------------------------+

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

SELECT COUNT(*)
FROM user
WHERE id IS NULL OR 
	name IS NULL OR 
	review_count IS NULL OR 
	yelping_since IS NULL OR
	useful IS NULL OR 
	funny IS NULL OR 
	cool IS NULL OR 
	fans IS NULL OR 
	average_stars IS NULL OR 
	compliment_hot IS NULL OR 
	compliment_more IS NULL OR 
	compliment_profile IS NULL OR 
	compliment_cute IS NULL OR 
	compliment_list IS NULL OR 
	compliment_note IS NULL OR 
	compliment_plain IS NULL OR 
	compliment_cool IS NULL OR 
	compliment_funny IS NULL OR 
	compliment_writer IS NULL OR 
	compliment_photos IS NULL;

	+----------+
	| COUNT(*) |
	+----------+
	|        0 |
	+----------+	
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT MIN(column)
FROM table

SELECT MAX(column)
FROM table

SELECT AVG(column)
FROM table

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
	


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city,
	SUM(review_count) AS reviews
	FROM business
	GROUP BY city
	ORDER BY reviews DESC
	
	Copy and Paste the Result Below:
	+-----------------+---------+
	| city            | reviews |
	+-----------------+---------+
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |
	| Tempe           |   10504 |
	| Pittsburgh      |    9798 |
	| Montréal        |    9448 |
	| Chandler        |    8112 |
	| Mesa            |    6875 |
	| Gilbert         |    6380 |
	| Cleveland       |    5593 |
	| Madison         |    5265 |
	| Glendale        |    4406 |
	| Mississauga     |    3814 |
	| Edinburgh       |    2792 |
	| Peoria          |    2624 |
	| North Las Vegas |    2438 |
	| Markham         |    2352 |
	| Champaign       |    2029 |
	| Stuttgart       |    1849 |
	| Surprise        |    1520 |
	| Lakewood        |    1465 |
	| Goodyear        |    1155 |
	+-----------------+---------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	SELECT stars,
	SUM(review_count) AS starcount
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+-----------+
	| stars | starcount |
	+-------+-----------+
	|   1.5 |        10 |
	|   2.5 |         6 |
	|   3.5 |        88 |
	|   4.0 |        21 |
	|   4.5 |        31 |
	|   5.0 |         3 |
	+-------+-----------+

ii. Beachwood

SQL code used to arrive at answer:
	SELECT stars,
	SUM(review_count) AS starcount
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+-----------+
	| stars | starcount |
	+-------+-----------+
	|   2.0 |         8 |
	|   2.5 |         3 |
	|   3.0 |        11 |
	|   3.5 |         6 |
	|   4.0 |        69 |
	|   4.5 |        17 |
	|   5.0 |        23 |
	+-------+-----------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT name,
		review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3	
		
	Copy and Paste the Result Below:
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+	


8. Does posing more reviews correlate with more fans? 

	More reviews does not necessarily mean more fans. More fans seems to more dependant on the amount of 	time a person has been yelping.

	Please explain your findings and interpretation of the results:

	SELECT name,
		review_count,
		fans,
		yelping_since
	FROM user
	ORDER BY fans DESC
	+-----------+--------------+------+---------------------+
	| name      | review_count | fans | yelping_since       |
	+-----------+--------------+------+---------------------+
	| Amy       |          609 |  503 | 2007-07-19 00:00:00 |
	| Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
	| Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
	| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
	| Christine |          930 |  173 | 2009-07-08 00:00:00 |
	| Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
	| Cat       |          377 |  133 | 2009-02-05 00:00:00 |
	| William   |         1215 |  126 | 2015-02-19 00:00:00 |
	| Fran      |          862 |  124 | 2012-04-05 00:00:00 |
	| Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
	| Mark      |          861 |  115 | 2009-05-31 00:00:00 |
	| Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |
	| bernice   |          255 |  105 | 2007-08-29 00:00:00 |
	| Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
	| Angela    |          694 |  101 | 2010-10-01 00:00:00 |
	| .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
	| Ben       |          307 |   96 | 2007-03-10 00:00:00 |
	| Linda     |          584 |   89 | 2005-08-07 00:00:00 |
	| Christina |          842 |   85 | 2012-10-08 00:00:00 |
	| Jessica   |          220 |   84 | 2009-01-12 00:00:00 |
	| Greg      |          408 |   81 | 2008-02-16 00:00:00 |
	| Nieves    |          178 |   80 | 2013-07-08 00:00:00 |
	| Sui       |          754 |   78 | 2009-09-07 00:00:00 |
	| Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
	| Nicole    |          161 |   73 | 2009-04-30 00:00:00 |
	+-----------+--------------+------+---------------------+
	(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 
	
	Love=1780
	Hate=232

	SQL code used to arrive at answer:
	
	SELECT COUNT(*) AS Love_Count
	FROM review
	WHERE text LIKE "%love%"
	+------------+
	| Love_Count |
	+------------+
	|       1780 |
	+------------+

	SELECT COUNT(*) AS Hate_Count
	FROM review
	WHERE text LIKE "%hate%"
	+------------+
	| Hate_Count |
	+------------+
	|        232 |
	+------------+

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT name,
		fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	
	Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes they are open different times on different days of the week but all follow the same schedule.

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, they have different numbers of reviews for each business.        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Yes, when you order by postal codes the higher reviewed Pizza resturants seem to all be in similar postal codes.

SQL code used for analysis:

		SELECT
		is_open 
		,name
		, address
		, city
        	, postal_code
		, MAX(CASE
			   WHEN hours LIKE "%monday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS monday_hours
		, MAX(CASE
			   WHEN hours LIKE "%tuesday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS tuesday_hours
		, MAX(CASE
			   WHEN hours LIKE "%wednesday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS wednesday_hours
		, MAX(CASE
			   WHEN hours LIKE "%thursday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS thursday_hours
		, MAX(CASE
			   WHEN hours LIKE "%friday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS friday_hours
		, MAX(CASE
			   WHEN hours LIKE "%saturday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS saturday_hours
		, MAX(CASE
			   WHEN hours LIKE "%sunday%" THEN TRIM(hours,'%MondayTuesWednesThursFriSatSun|%') 
			   END) AS sunday_hours
		, review_count
		, stars
		, CASE
		WHEN stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN stars BETWEEN 4 AND 5 THEN '4-5 stars'
	END AS star_group
	FROM business 
	INNER JOIN hours on id
	WHERE (city = 'Pittsburgh'
	AND
		name LIKE '%pizza%')
    	AND
    		(stars BETWEEN 2 AND 3
    	OR
    		stars BETWEEN 4 AND 5)
	GROUP BY name
	ORDER BY postal_code;


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
 The one that is still open has higher reviews.        
         
ii. Difference 2:
The one that is still open has less reviews so may be a newer business.         
         
         
SQL code used for analysis:

	SELECT
		is_open 
		,name
		, address
		, city
		, review_count
		, stars
		, CASE
		WHEN stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS star_group
	FROM business 
	WHERE (city = 'Pittsburgh'
	AND
		name LIKE '%food%')
   	AND
    		(stars BETWEEN 2 AND 3
    	OR
   		 stars BETWEEN 4 AND 5)
	GROUP BY is_open
	ORDER BY stars;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
 I will analyse data from experienced Yelpers and analyze their success.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
 After looking at the ER diagram I decided to look at Yelpers number of years active and see if there is a coorolation between number of reviews and total number of compliments for more experienced yelpers. This should help indicate if   longevity and volume are more of a factor than quality of reviews. I will also look at those with the most compliments to see their average stars. This would be a good indication if they are just receiving compliments for all good or poor reviews.

 For this analysis, I will need to pull Yelpers, calculate the years they have provided Yelp reviews, their average star rating, the number of reviews they have submitted, and calculate the total number of compliments.                          
                  
iii. Output of your finished dataset:

	+--------+---------------+---------------+--------------+-------------------+
	| name   | years_yelping | average_stars | review_count | total_compliments |
	+--------+---------------+---------------+--------------+-------------------+
	| Harald |            12 |           4.4 |         1153 |             81331 |
	| Fran   |            12 |           4.1 |          862 |             16631 |
	| Amy    |            17 |          3.21 |          609 |             11735 |
	| Greg   |            16 |          3.67 |          408 |              5517 |
	| Mimi   |            13 |          4.05 |          968 |              4342 |
	| Jim    |            16 |          3.85 |          671 |              4334 |
	| Gerald |            12 |           3.6 |         2000 |              3361 |
	| Linda  |            19 |          4.06 |          584 |              3308 |
	| Ben    |            17 |           3.7 |          307 |              3062 |
	| Cat    |            15 |          3.99 |          377 |              2986 |
	+--------+---------------+---------------+--------------+-------------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    name
    , DATE('NOW')-yelping_since AS years_yelping
    , average_stars  
    , review_count
    , SUM(compliment_hot + compliment_more + compliment_profile + compliment_cute +
       compliment_list + compliment_note + compliment_plain + compliment_cool +
       compliment_funny + compliment_writer + compliment_photos) AS total_compliments
FROM user
GROUP BY name, years_yelping, review_count
ORDER BY total_compliments DESC
LIMIT 10;  